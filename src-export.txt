
=== App.tsx ===

import  { useState } from 'react';
import type { FormEvent, ChangeEvent } from 'react'
import type { FormData, Trabajo } from './types/reporte.types'; 
import ReporteForm from './components/ReporteForm';
import TrabajosRealizados from './components/TrabajosRealizados';
import { generarReportePdf } from './utils/generarReportePdf';

export default function App() {
  const [formData, setFormData] = useState<FormData>({
    fecha: '',
    contrato: '',
    zonaTrabajo: '',
    supervisor: '',
    prevencionista: '',
    vehiculos: '',
    personal: '',
    itoMetro: '',
    acuerdos: '',
    horaIngreso: '',
    horaSalida: '',
  });

  const [trabajos, setTrabajos] = useState<Trabajo[]>([
    { estacion: '', saf: [{ titulo: '', detalle: '' }], observaciones: '', documentacionCamara: [] },
  ]);

  const handleFormChange = (
    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    await generarReportePdf(formData, trabajos);
  };


  return (
    <div className="min-h-screen bg-gray-100 p-4">
      <form
        onSubmit={handleSubmit}
        className="max-w-4xl mx-auto bg-white p-6 rounded-xl shadow space-y-6"
      >
        <h2 className="text-2xl font-bold text-center">
          Reporte Diario Sometec
        </h2>

        <ReporteForm data={formData} onChange={handleFormChange} />

        <TrabajosRealizados trabajos={trabajos} setTrabajos={setTrabajos} />

        <button
          type="submit"
          className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-xl font-semibold"
        >
          Enviar Reporte
        </button>
      </form>
    </div>
  );
}


------------------------------------


=== assets\react.svg ===

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

------------------------------------


=== components\CameraCapture.tsx ===

import { useEffect, useRef, useState } from 'react';
import type { DocumentacionCamara } from '../types/reporte.types';

interface Props {
  onCapture: (doc: DocumentacionCamara) => void; // devuelve foto+descripciÃ³n
  onClose: () => void;
}

export default function CameraCapture({ onCapture, onClose }: Props) {
  const videoRef = useRef<HTMLVideoElement | null>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const [descripcion, setDescripcion] = useState('');

  useEffect(() => {
    (async () => {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          video: { facingMode: 'environment' },
          audio: false,
        });
        streamRef.current = stream;
        if (videoRef.current) {
          videoRef.current.srcObject = stream;
          await videoRef.current.play();
        }
      } catch (err) {
        alert('No se pudo acceder a la cÃ¡mara');
        console.error(err);
        onClose();
      }
    })();
    return () => streamRef.current?.getTracks().forEach(t => t.stop());
  }, [onClose]);

  const manejarCaptura = () => {
    if (!videoRef.current) return;
    const canvas = document.createElement('canvas');
    canvas.width = videoRef.current.videoWidth;
    canvas.height = videoRef.current.videoHeight;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    ctx.drawImage(videoRef.current, 0, 0);
    const dataUrl = canvas.toDataURL('image/png');

    onCapture({ fotoUrl: dataUrl, descripcion });
    onClose();
  };

  return (
    <div className="mt-2 relative w-full max-w-xs space-y-2">
      <video
        ref={videoRef}
        className="w-full rounded-lg border"
        autoPlay
        playsInline
        muted
      />
      <input
        type="text"
        placeholder="DescripciÃ³n de la imagen"
        value={descripcion}
        onChange={e => setDescripcion(e.target.value)}
        className="w-full p-2 border rounded-lg"
      />
      <button
        type="button"
        onClick={manejarCaptura}
        className="w-full bg-white border px-4 py-1 text-sm rounded-lg shadow"
      >
        ðŸ“¸ Capturar
      </button>
    </div>
  );
}


------------------------------------


=== components\ReporteForm.tsx ===

import type { ChangeEvent } from 'react';
import type { FormData } from '../types/reporte.types';
interface Props {
  data: FormData;
  onChange: (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
}

export default function ReporteForm({ data, onChange }: Props) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      {Object.entries(data).map(([key, value]) => (
        <div key={key} className="flex flex-col">
          <label htmlFor={key} className="text-sm font-semibold capitalize">
            {key.replace(/([A-Z])/g, ' $1')}
          </label>

          <input
            id={key}
            name={key}
            value={value}
            onChange={onChange}
            type={
              key.includes('hora')
                ? 'time'
                : key === 'fecha'
                ? 'date'
                : 'text'
            }
            className="p-2 mt-1 border border-gray-300 rounded-lg"
          />
        </div>
      ))}
    </div>
  );
}


------------------------------------


=== components\SAFEntry.tsx ===

import type { ChangeEvent } from 'react';
import type { SAF } from '../types/reporte.types';
interface Props {
  saf: SAF;
  onFieldChange: (field: keyof SAF, value: string) => void;
}

export default function SAFEntry({ saf, onFieldChange }: Props) {
  return (
    <div className="space-y-2">
      <input
        placeholder="TÃ­tulo SAF"
        value={saf.titulo}
        onChange={(e: ChangeEvent<HTMLInputElement>) =>
          onFieldChange('titulo', e.target.value)
        }
        className="w-full p-2 border border-gray-300 rounded-lg"
      />
      <textarea
        placeholder="Detalle"
        value={saf.detalle}
        onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>
          onFieldChange('detalle', e.target.value)
        }
        className="w-full p-2 border border-gray-300 rounded-lg"
      />
    </div>
  );
}


------------------------------------


=== components\TrabajoCard.tsx ===

import { useState } from 'react';
import type { Trabajo, SAF, DocumentacionCamara } from '../types/reporte.types';
import SAFEntry from './SAFEntry';
import CameraCapture from './CameraCapture';

interface Props {
  trabajo: Trabajo;
  onTrabajoChange: <K extends keyof Trabajo>(campo: K, valor: Trabajo[K]) => void;
  onSafChange: (safIdx: number, campo: keyof SAF, valor: string) => void;
  addSaf: () => void;
}

export default function TrabajoCard({
  trabajo,
  onTrabajoChange,
  onSafChange,
  addSaf,
}: Props) {
  const [cameraOpen, setCameraOpen] = useState(false);

  /* aÃ±ade una nueva foto */
  const agregarDoc = (doc: DocumentacionCamara) => {
    const nuevasFotos = [...trabajo.documentacionCamara, doc];
    onTrabajoChange('documentacionCamara', nuevasFotos);
  };

  return (
    <div className="border p-4 rounded-lg space-y-4 bg-gray-50">
      {/* EstaciÃ³n */}
      <div>
        <label className="font-semibold">EstaciÃ³n</label>
        <input
          value={trabajo.estacion}
          onChange={e => onTrabajoChange('estacion', e.target.value)}
          className="w-full p-2 mt-1 border border-gray-300 rounded-lg"
        />
      </div>

      {/* SAFs */}
      {trabajo.saf.map((saf, idx) => (
        <SAFEntry
          key={idx}
          saf={saf}
          onFieldChange={(campo, valor) => onSafChange(idx, campo, valor)}
        />
      ))}
      <button type="button" onClick={addSaf} className="text-sm text-blue-600">
        + Agregar SAF
      </button>

      {/* Observaciones */}
      <div className="space-y-2">
        <label className="font-semibold">Observaciones</label>
        <textarea
          value={trabajo.observaciones}
          onChange={e => onTrabajoChange('observaciones', e.target.value)}
          className="w-full p-2 border border-gray-300 rounded-lg"
        />
      </div>

      {/* Fotos */}
      <div className="space-y-2">
        {cameraOpen ? (
          <CameraCapture
            onCapture={agregarDoc}
            onClose={() => setCameraOpen(false)}
          />
        ) : (
          <button
            type="button"
            onClick={() => setCameraOpen(true)}
            className="text-sm text-blue-600 underline"
          >
            ðŸ“· Tomar Foto
          </button>
        )}

        {/* miniaturas */}
        {trabajo.documentacionCamara?.map((doc, i) => (
          <div key={i} className="flex items-start gap-2">
            <img
              src={doc.fotoUrl}
              alt={`Foto ${i + 1}`}
              className="w-24 h-24 object-cover rounded-lg border"
            />
            <p className="flex-1">{doc.descripcion}</p>
          </div>
        ))}
      </div>
    </div>
  );
}


------------------------------------


=== components\TrabajosRealizados.tsx ===

import type { Trabajo, SAF, DocumentacionCamara } from '../types/reporte.types'; 
import TrabajoCard from './TrabajoCard';

interface Props {
  trabajos: Trabajo[];
  setTrabajos: (value: Trabajo[]) => void;
}

export default function TrabajosRealizados({ trabajos, setTrabajos }: Props) {
  /* Helpers para mutar estado inmutablemente */
  const handleTrabajoChange =
    (idx: number) =>
    <K extends keyof Trabajo>(campo: K, valor: Trabajo[K]) => {
      setTrabajos(
        trabajos.map((t, i) =>
          i === idx ? { ...t, [campo]: valor } : t,
        ),
      );
    };


  const handleSafChange =
    (trabajoIdx: number) =>
    (safIdx: number, field: keyof SAF, value: string) => {
      setTrabajos(
        trabajos.map((t, i) =>
          i === trabajoIdx
            ? {
                ...t,
                saf: t.saf.map((s, j) =>
                  j === safIdx ? { ...s, [field]: value } : s
                ),
              }
            : t
        )
      );
    };

  const addSaf = (trabajoIdx: number) => {
    setTrabajos(
      trabajos.map((t, i) =>
        i === trabajoIdx ? { ...t, saf: [...t.saf, { titulo: '', detalle: '' }] } : t
      )
    );
  };

  const addTrabajo = () => {
    setTrabajos([
      ...trabajos,
      { estacion: '', saf: [{ titulo: '', detalle: '' }], observaciones: '', documentacionCamara: [] },
    ]);
  };

  return (
    <div className="space-y-6">
      <h3 className="text-xl font-bold">Trabajos Realizados</h3>

      {trabajos.map((trabajo, idx) => (
        <TrabajoCard
          key={idx}
          trabajo={trabajo}
          onTrabajoChange={handleTrabajoChange(idx)}
          onSafChange={handleSafChange(idx)}
          addSaf={() => addSaf(idx)}
        />
      ))}

      <button
        type="button"
        onClick={addTrabajo}
        className="text-blue-600 text-sm"
      >
        + Agregar EstaciÃ³n
      </button>
    </div>
  );
}


------------------------------------


=== index.css ===

@tailwind base;
@tailwind components;
@tailwind utilities;



------------------------------------


=== main.tsx ===

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)


------------------------------------


=== types\reporte.types.ts ===

export interface FormData  {
  fecha: string;
  contrato: string;
  zonaTrabajo: string;
  supervisor: string;
  prevencionista: string;
  vehiculos: string;
  personal: string;
  itoMetro: string;
  acuerdos: string;
  horaIngreso: string;
  horaSalida: string;
};

export interface SAF  {
  titulo: string;
  detalle: string;
};
export interface DocumentacionCamara {
  fotoUrl: string;
  descripcion: string;
}

export interface Trabajo {
  estacion: string;
  saf: SAF[];
  observaciones: string;
  documentacionCamara: DocumentacionCamara[];
};


------------------------------------


=== utils\generarReportePdf.ts ===

// src/utils/generarReportePdf.ts
import { jsPDF } from 'jspdf';
import type { FormData, Trabajo } from '../types/reporte.types';

/**
 * Genera y descarga un PDF con el contenido del formulario y los trabajos.
 */
export async function generarReportePdf(
  datos: FormData,
  trabajos: Trabajo[],
) {
  const doc = new jsPDF({ orientation: 'p', unit: 'mm', format: 'a4' });
  const margen = 15;
  let y = margen;

  // ---------- Encabezado ----------
  doc.setFontSize(16).setFont('helvetica', 'bold');
  doc.text('Reporte Diario â€“ Sometec', 105, y, { align: 'center' });
  y += 10;

  // ---------- Datos generales ----------
  doc.setFontSize(11).setFont('helvetica', 'normal');

  const campos: (keyof FormData)[] = [
    'fecha', 'contrato', 'zonaTrabajo', 'supervisor', 'prevencionista',
    'vehiculos', 'personal', 'itoMetro', 'acuerdos',
    'horaIngreso', 'horaSalida',
  ];

  campos.forEach((c) => {
    doc.text(`${formatearEtiqueta(c)}: ${datos[c]}`, margen, y);
    y = saltarLinea(doc, y);
  });

  // ---------- Trabajos ----------
  trabajos.forEach((trabajo, i) => {
    y = insertarSubtitulo(doc, `EstaciÃ³n ${i + 1}: ${trabajo.estacion}`, y);

    // SAF
    trabajo.saf.forEach((saf, j) => {
      doc.text(`SAF ${j + 1} â€“ ${saf.titulo}`, margen, y);
      y = saltarLinea(doc, y);
      y = insertarParrafo(doc, saf.detalle, margen + 5, y);
    });

    // Observaciones
    if (trabajo.observaciones) {
      y = insertarParrafo(
        doc,
        `Observaciones: ${trabajo.observaciones}`,
        margen,
        y,
      );
    }

    // Fotos
    for (const { fotoUrl, descripcion } of trabajo.documentacionCamara) {
      const { width, height } = escalarImagen(80, 60); // mÃ¡ximo 80 mm Ã— 60 mm
      if (y + height > 285) doc.addPage(), (y = margen);
      doc.addImage(fotoUrl, 'PNG', margen, y, width, height);
      if (descripcion) {
        doc.text(descripcion, margen + width + 5, y + 5);
      }
      y = saltarLinea(doc, y, height);
    }

    y = saltarLinea(doc, y, 5); // espacio entre estaciones
  });

  // ---------- Guardar ----------
  doc.save(`reporte_${datos.fecha || Date.now()}.pdf`);
}

/* ----------------- Helpers ----------------- */

/** Devuelve etiqueta legible a partir de la clave del objeto */
function formatearEtiqueta(k: string) {
  return k.replace(/([A-Z])/g, ' $1').replace(/^./, (l) => l.toUpperCase());
}

/** AÃ±ade salto de lÃ­nea; si llegamos al final, crea nueva pÃ¡gina */
function saltarLinea(doc: jsPDF, yActual: number, salto = 7) {
  const y = yActual + salto;
  if (y > 285) {
    doc.addPage();
    return 15; // margen superior
  }
  return y;
}

/** Inserta subtÃ­tulo y devuelve el nuevo Y */
function insertarSubtitulo(doc: jsPDF, texto: string, y: number) {
  doc.setFontSize(13).setFont('helvetica', 'bold');
  doc.text(texto, 15, y);
  doc.setFontSize(11).setFont('helvetica', 'normal');
  return y + 7;
}

/** Inserta pÃ¡rrafo con envoltura automÃ¡tica */
function insertarParrafo(doc: jsPDF, texto: string, x: number, y: number) {
  const lineas = doc.splitTextToSize(texto, 180 - x);
  lineas.forEach((l: any) => {
    doc.text(l, x, y);
    y = saltarLinea(doc, y);
  });
  return y;
}

/** Devuelve ancho y alto manteniendo proporciÃ³n dentro de los mÃ¡ximos dados */
function escalarImagen(maxW: number, maxH: number) {
  // asume 4:3; ajusta segÃºn tu contexto si lo necesitas
  const ratio = maxW / maxH;
  return { width: maxW, height: maxW / ratio };
}


------------------------------------


=== vite-env.d.ts ===

/// <reference types="vite/client" />


------------------------------------
